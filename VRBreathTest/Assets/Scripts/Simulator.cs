using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Threading;
using System.Threading.Tasks;
using Valve.VR;

public class Simulator : MonoBehaviour
{

    public bool turnSimulatorOn = true;
    public OSC osc;
    public float cycleWaitTimeSeconds = 0.01f;

    private int sendBreathFlag;
    private readonly object flagLock = new object(); // locking object

    // hardcoded breath sequences from detector data
    private List<(float, float, float)> baselineSequenceTupleList = new List<(float, float, float)>
    {
        (0.01734f, 0.64412f, 0.99915f),
        (0.01697f, 0.64400f, 0.99915f),
        (0.01697f, 0.64351f, 0.99915f),
        (0.01673f, 0.64302f, 0.99915f),
        (0.01697f, 0.64278f, 0.99915f),
        (0.01697f, 0.64290f, 0.99915f),
        (0.01673f, 0.64302f, 0.99915f),
        (0.01673f, 0.64266f, 0.99915f),
        (0.01660f, 0.64168f, 0.99915f),
        (0.01685f, 0.64266f, 0.99915f),
        (0.01685f, 0.64253f, 0.99915f),
        (0.01721f, 0.64095f, 0.99915f),
        (0.01685f, 0.63912f, 0.99915f),
        (0.01648f, 0.63887f, 0.99915f),
        (0.01697f, 0.64070f, 0.99915f),
        (0.01709f, 0.64107f, 0.99915f),
        (0.01697f, 0.64205f, 0.99915f),
        (0.01709f, 0.64278f, 0.99915f),
        (0.01721f, 0.64376f, 0.99915f),
        (0.01697f, 0.64376f, 0.99915f),
        (0.01685f, 0.64339f, 0.99915f),
        (0.01697f, 0.64314f, 0.99915f),
        (0.01697f, 0.64339f, 0.99915f),
        (0.01697f, 0.64327f, 0.99915f),
        (0.01697f, 0.64327f, 0.99915f),
        (0.01697f, 0.64180f, 0.99915f),
        (0.01697f, 0.64046f, 0.99915f),
        (0.01673f, 0.64034f, 0.99915f),
        (0.01685f, 0.64021f, 0.99915f),
        (0.01673f, 0.64021f, 0.99915f),
        (0.01709f, 0.64131f, 0.99915f),
        (0.01660f, 0.64205f, 0.99915f),
        (0.01660f, 0.64205f, 0.99915f),
        (0.01697f, 0.64229f, 0.99915f),
        (0.01709f, 0.64205f, 0.99915f),
        (0.01709f, 0.64278f, 0.99915f),
        (0.01709f, 0.64241f, 0.99915f),
        (0.01697f, 0.64192f, 0.99915f),
        (0.01673f, 0.64253f, 0.99915f),
        (0.01673f, 0.64376f, 0.99915f),
        (0.01685f, 0.64437f, 0.99915f),
        (0.01673f, 0.64485f, 0.99915f),
        (0.01673f, 0.64449f, 0.99915f),
        (0.01673f, 0.64339f, 0.99915f),
        (0.01709f, 0.64290f, 0.99915f),
        (0.01697f, 0.64144f, 0.99915f),
        (0.01709f, 0.64009f, 0.99915f),
        (0.01697f, 0.63997f, 0.99915f),
        (0.01660f, 0.64021f, 0.99915f),
        (0.01660f, 0.63960f, 0.99915f),
        (0.01697f, 0.63997f, 0.99915f),
        (0.01697f, 0.63997f, 0.99915f),
        (0.01709f, 0.64131f, 0.99915f),
        (0.01673f, 0.64241f, 0.99915f),
        (0.01709f, 0.64241f, 0.99915f),
        (0.01685f, 0.64278f, 0.99915f),
        (0.01697f, 0.64266f, 0.99915f),
        (0.01697f, 0.64290f, 0.99915f),
        (0.01660f, 0.64278f, 0.99915f),
        (0.01685f, 0.64253f, 0.99915f),
        (0.01685f, 0.64278f, 0.99915f),
        (0.01673f, 0.64314f, 0.99915f),
        (0.01697f, 0.64314f, 0.99915f),
        (0.01685f, 0.64278f, 0.99915f),
        (0.01673f, 0.64192f, 0.99915f),
        (0.01709f, 0.64180f, 0.99915f),
        (0.01721f, 0.64168f, 0.99915f),
        (0.01673f, 0.64217f, 0.99915f),
        (0.01685f, 0.64192f, 0.99915f),
        (0.01673f, 0.64156f, 0.99915f),
        (0.01709f, 0.64107f, 0.99915f),
        (0.01709f, 0.64034f, 0.99915f),
        (0.01709f, 0.63973f, 0.99915f),
        (0.01697f, 0.63960f, 0.99915f),
        (0.01709f, 0.63924f, 0.99915f),
        (0.01685f, 0.63716f, 0.99915f),
        (0.01709f, 0.63619f, 0.99915f),
        (0.01709f, 0.63521f, 0.99915f),
        (0.01697f, 0.63728f, 0.99915f),
        (0.01673f, 0.63863f, 0.99915f),
        (0.01721f, 0.63948f, 0.99915f),
        (0.01709f, 0.63875f, 0.99915f),
        (0.01709f, 0.64009f, 0.99915f),
        (0.01709f, 0.64119f, 0.99915f),
        (0.01673f, 0.64070f, 0.99915f),
        (0.01685f, 0.64131f, 0.99915f),
        (0.01697f, 0.64070f, 0.99915f),
        (0.01697f, 0.64083f, 0.99915f),
        (0.01697f, 0.64095f, 0.99915f),
        (0.01697f, 0.64083f, 0.99915f),
        (0.01673f, 0.64119f, 0.99915f),
        (0.01685f, 0.64156f, 0.99915f),
        (0.01685f, 0.64083f, 0.99915f),
        (0.01685f, 0.64107f, 0.99915f),
        (0.01709f, 0.64119f, 0.99915f),
        (0.01673f, 0.64144f, 0.99915f),
        (0.01673f, 0.64095f, 0.99915f),
        (0.01697f, 0.64229f, 0.99915f),
        (0.01685f, 0.64253f, 0.99915f),
        (0.01685f, 0.64278f, 0.99915f),
        (0.01660f, 0.64168f, 0.99915f),
        (0.01673f, 0.64070f, 0.99915f),
        (0.01721f, 0.63924f, 0.99915f),
        (0.01697f, 0.63899f, 0.99915f),
        (0.01685f, 0.63863f, 0.99915f),
        (0.01697f, 0.63826f, 0.99915f),
        (0.01648f, 0.63814f, 0.99915f),
        (0.01709f, 0.63838f, 0.99915f),
        (0.01697f, 0.63948f, 0.99915f),
        (0.01709f, 0.63985f, 0.99915f),
        (0.01660f, 0.63851f, 0.99915f),
        (0.01709f, 0.63826f, 0.99915f),
        (0.01673f, 0.63814f, 0.99915f),
        (0.01709f, 0.63887f, 0.99915f),
        (0.01673f, 0.63851f, 0.99915f),
        (0.01685f, 0.63875f, 0.99915f),
        (0.01685f, 0.63973f, 0.99915f),
        (0.01673f, 0.64034f, 0.99915f),
        (0.01721f, 0.64131f, 0.99915f),
        (0.01697f, 0.64009f, 0.99915f),
        (0.01685f, 0.63960f, 0.99915f),
        (0.01673f, 0.63899f, 0.99915f),
        (0.01697f, 0.63960f, 0.99915f),
        (0.01685f, 0.63948f, 0.99915f),
        (0.01697f, 0.63912f, 0.99915f),
        (0.01697f, 0.63973f, 0.99915f),
        (0.01709f, 0.63912f, 0.99915f),
        (0.01673f, 0.63826f, 0.99915f),
        (0.01673f, 0.63753f, 0.99915f),
        (0.01721f, 0.63704f, 0.99915f),
        (0.01697f, 0.63716f, 0.99915f),
        (0.01721f, 0.63838f, 0.99915f),
        (0.01673f, 0.63863f, 0.99915f),
        (0.01709f, 0.63790f, 0.99915f),
        (0.01685f, 0.63728f, 0.99915f),
        (0.01709f, 0.63716f, 0.99915f),
        (0.01673f, 0.63753f, 0.99915f),
        (0.01660f, 0.63802f, 0.99915f),
        (0.01599f, 0.63570f, 0.99915f),
        (0.01685f, 0.63606f, 0.99915f),
        (0.01685f, 0.63545f, 0.99915f),
        (0.01660f, 0.63765f, 0.99915f),
        (0.01709f, 0.63765f, 0.99915f),
        (0.01673f, 0.63741f, 0.99915f),
        (0.01709f, 0.63716f, 0.99915f),
        (0.01697f, 0.63655f, 0.99915f),
        (0.01648f, 0.63619f, 0.99915f),
        (0.01697f, 0.63728f, 0.99915f),
        (0.01685f, 0.63875f, 0.99915f),
        (0.01697f, 0.63924f, 0.99915f),
        (0.01709f, 0.63912f, 0.99915f),
        (0.01685f, 0.63912f, 0.99915f),
        (0.01685f, 0.63960f, 0.99915f),
        (0.01673f, 0.63973f, 0.99915f),
        (0.01709f, 0.63924f, 0.99915f),
        (0.01697f, 0.63899f, 0.99915f),
        (0.01685f, 0.63973f, 0.99915f),
        (0.01660f, 0.64009f, 0.99915f),
        (0.01685f, 0.63960f, 0.99915f),
        (0.01697f, 0.63912f, 0.99915f),
        (0.01734f, 0.63997f, 0.99915f),
        (0.01697f, 0.64058f, 0.99915f),
        (0.01697f, 0.64095f, 0.99915f),
        (0.01685f, 0.64083f, 0.99915f),
        (0.01697f, 0.64070f, 0.99915f),
        (0.01660f, 0.63985f, 0.99915f),
        (0.01685f, 0.64034f, 0.99915f),
        (0.01709f, 0.64168f, 0.99915f),
        (0.01673f, 0.63887f, 0.99915f),
        (0.01697f, 0.63777f, 0.99915f),
        (0.01697f, 0.63912f, 0.99915f),
        (0.01697f, 0.63973f, 0.99915f),
        (0.01685f, 0.63924f, 0.99915f),
        (0.01685f, 0.63814f, 0.99915f),
        (0.01697f, 0.63692f, 0.99915f),
        (0.01685f, 0.63643f, 0.99915f),
        (0.01709f, 0.63728f, 0.99915f),
        (0.01697f, 0.63790f, 0.99915f),
        (0.01709f, 0.63912f, 0.99915f),
        (0.01709f, 0.63838f, 0.99915f),
        (0.01709f, 0.63814f, 0.99915f),
        (0.01685f, 0.63753f, 0.99915f),
        (0.01697f, 0.63899f, 0.99915f),
        (0.01685f, 0.63912f, 0.99915f),
        (0.01673f, 0.63790f, 0.99915f),
        (0.01673f, 0.63802f, 0.99915f),
        (0.01673f, 0.63875f, 0.99915f),
        (0.01709f, 0.63875f, 0.99915f),
        (0.01685f, 0.63802f, 0.99915f),
        (0.01685f, 0.63777f, 0.99915f),
        (0.01697f, 0.63777f, 0.99915f),
        (0.01721f, 0.63887f, 0.99915f),
        (0.01685f, 0.63936f, 0.99915f),
        (0.01660f, 0.64144f, 0.99915f),
        (0.01709f, 0.64107f, 0.99915f),
        (0.01697f, 0.64119f, 0.99915f),
        (0.01697f, 0.64131f, 0.99915f),
        (0.01685f, 0.64046f, 0.99915f),
        (0.01685f, 0.63997f, 0.99915f),
        (0.01685f, 0.63960f, 0.99915f)
    };
    private List<(float, float, float)> breathSequenceTupleList = new List<(float, float, float)>
    {
        (0.01660f, 0.65425f, 0.99915f),
        (0.01648f, 0.65926f, 0.99915f),
        (0.01636f, 0.67232f, 0.99915f),
        (0.01636f, 0.68233f, 0.99915f),
        (0.01587f, 0.69051f, 0.99915f),
        (0.01636f, 0.69674f, 0.99915f),
        (0.01648f, 0.70297f, 0.99915f),
        (0.01660f, 0.71054f, 0.99915f),
        (0.01660f, 0.71994f, 0.99915f),
        (0.01648f, 0.72983f, 0.99915f),
        (0.02796f, 0.73996f, 0.99915f),
        (0.04688f, 0.74826f, 0.99915f),
        (0.06605f, 0.75632f, 0.99915f),
        (0.08815f, 0.76328f, 0.99915f),
        (0.10609f, 0.76755f, 0.99915f),
        (0.11952f, 0.76999f, 0.99915f),
        (0.13344f, 0.77500f, 0.99915f),
        (0.15041f, 0.78098f, 0.99915f),
        (0.16530f, 0.78537f, 0.99915f),
        (0.17678f, 0.78794f, 0.99915f),
        (0.18703f, 0.79050f, 0.99915f),
        (0.19900f, 0.79490f, 0.99915f),
        (0.20950f, 0.79819f, 0.99915f),
        (0.22244f, 0.80259f, 0.99915f),
        (0.23074f, 0.80393f, 0.99915f),
        (0.23721f, 0.80515f, 0.99915f),
        (0.24368f, 0.80711f, 0.99915f),
        (0.25235f, 0.81040f, 0.99915f),
        (0.26273f, 0.81431f, 0.99915f),
        (0.27335f, 0.81883f, 0.99915f),
        (0.28446f, 0.82200f, 0.99915f),
        (0.29667f, 0.82530f, 0.99915f),
        (0.30900f, 0.83018f, 0.99915f),
        (0.32401f, 0.83604f, 0.99915f),
        (0.33915f, 0.84056f, 0.99915f),
        (0.34941f, 0.84288f, 0.99915f),
        (0.35979f, 0.84617f, 0.99915f),
        (0.37016f, 0.84874f, 0.99915f),
        (0.37981f, 0.85179f, 0.99915f),
        (0.39141f, 0.85557f, 0.99915f),
        (0.40239f, 0.86009f, 0.99915f),
        (0.41350f, 0.86375f, 0.99915f),
        (0.42364f, 0.86644f, 0.99915f),
        (0.43011f, 0.86717f, 0.99915f),
        (0.43719f, 0.86876f, 0.99915f),
        (0.44329f, 0.87071f, 0.99915f),
        (0.44940f, 0.87181f, 0.99915f),
        (0.45574f, 0.87364f, 0.99915f),
        (0.46185f, 0.87633f, 0.99915f),
        (0.46966f, 0.88011f, 0.99915f),
        (0.47979f, 0.88280f, 0.99915f),
        (0.48663f, 0.88451f, 0.99915f),
        (0.49335f, 0.88634f, 0.99915f),
        (0.49945f, 0.88841f, 0.99915f),
        (0.50507f, 0.88976f, 0.99915f),
        (0.51068f, 0.89171f, 0.99915f),
        (0.51447f, 0.89208f, 0.99915f),
        (0.51874f, 0.89342f, 0.99915f),
        (0.52460f, 0.89574f, 0.99915f),
        (0.52997f, 0.89781f, 0.99915f),
        (0.53547f, 0.89879f, 0.99915f),
        (0.54108f, 0.90160f, 0.99915f),
        (0.54450f, 0.90160f, 0.99915f),
        (0.54621f, 0.90099f, 0.99915f),
        (0.54853f, 0.90233f, 0.99915f),
        (0.55085f, 0.90233f, 0.99915f),
        (0.55390f, 0.90429f, 0.99915f),
        (0.55512f, 0.90355f, 0.99915f),
        (0.55695f, 0.90514f, 0.99915f),
        (0.55952f, 0.90538f, 0.99915f),
        (0.55878f, 0.90453f, 0.99915f),
        (0.55842f, 0.90380f, 0.99915f),
        (0.55878f, 0.90441f, 0.99915f),
        (0.55891f, 0.90392f, 0.99915f),
        (0.56025f, 0.90490f, 0.99915f),
        (0.56074f, 0.90477f, 0.99915f),
        (0.56293f, 0.90575f, 0.99915f),
        (0.56232f, 0.90453f, 0.99915f),
        (0.56281f, 0.90502f, 0.99915f),
        (0.56342f, 0.90575f, 0.99915f),
        (0.56525f, 0.90685f, 0.99915f),
        (0.56587f, 0.90636f, 0.99915f),
        (0.56880f, 0.90807f, 0.99915f),
        (0.57173f, 0.90880f, 0.99915f),
        (0.57453f, 0.91076f, 0.99915f),
        (0.57649f, 0.91027f, 0.99915f),
        (0.57710f, 0.91039f, 0.99915f),
        (0.58515f, 0.91539f, 0.99915f),
        (0.59370f, 0.91857f, 0.99915f),
        (0.59919f, 0.91930f, 0.99915f),
        (0.60115f, 0.91808f, 0.99915f),
        (0.60347f, 0.91967f, 0.99915f),
        (0.60518f, 0.92052f, 0.99915f),
        (0.60872f, 0.92077f, 0.99915f),
        (0.61067f, 0.92052f, 0.99915f),
        (0.61336f, 0.92296f, 0.99915f),
        (0.61555f, 0.92284f, 0.99915f),
        (0.61653f, 0.92309f, 0.99915f),
        (0.61568f, 0.92150f, 0.99915f),
        (0.61323f, 0.92052f, 0.99915f),
        (0.61030f, 0.91942f, 0.99915f),
        (0.60823f, 0.91894f, 0.99915f),
        (0.60273f, 0.91637f, 0.99915f),
        (0.59919f, 0.91466f, 0.99915f),
        (0.59309f, 0.91271f, 0.99915f),
        (0.58601f, 0.91015f, 0.99915f),
        (0.58027f, 0.90880f, 0.99915f),
        (0.57575f, 0.90673f, 0.99915f),
        (0.57087f, 0.90599f, 0.99915f),
        (0.56513f, 0.90367f, 0.99915f),
        (0.55976f, 0.90197f, 0.99915f),
        (0.55598f, 0.90172f, 0.99915f),
        (0.55378f, 0.90160f, 0.99915f),
        (0.54816f, 0.89891f, 0.99915f),
        (0.54474f, 0.89794f, 0.99915f),
        (0.54255f, 0.89672f, 0.99915f),
        (0.53852f, 0.89647f, 0.99915f),
        (0.53376f, 0.89403f, 0.99915f),
        (0.52753f, 0.89098f, 0.99915f),
        (0.52082f, 0.88927f, 0.99915f),
        (0.51605f, 0.88817f, 0.99915f),
        (0.51264f, 0.88817f, 0.99915f),
        (0.50702f, 0.88573f, 0.99915f),
        (0.49884f, 0.88109f, 0.99915f),
        (0.49274f, 0.87999f, 0.99915f),
        (0.48456f, 0.87669f, 0.99915f),
        (0.47857f, 0.87596f, 0.99915f),
        (0.47223f, 0.87376f, 0.99915f),
        (0.47088f, 0.87376f, 0.99915f),
        (0.46624f, 0.87242f, 0.99915f),
        (0.45587f, 0.86754f, 0.99915f),
        (0.43829f, 0.85826f, 0.99915f),
        (0.41887f, 0.85106f, 0.99915f),
        (0.39702f, 0.84239f, 0.99915f),
        (0.37285f, 0.83384f, 0.99915f),
        (0.34306f, 0.82212f, 0.99915f),
        (0.30961f, 0.81077f, 0.99915f),
        (0.28556f, 0.80369f, 0.99915f),
        (0.25772f, 0.79539f, 0.99915f),
        (0.23367f, 0.78855f, 0.99915f),
        (0.21475f, 0.78403f, 0.99915f),
        (0.19485f, 0.77988f, 0.99915f),
        (0.17763f, 0.77475f, 0.99915f),
        (0.16311f, 0.77133f, 0.99915f),
        (0.14797f, 0.76670f, 0.99915f),
        (0.13490f, 0.76328f, 0.99915f),
        (0.12343f, 0.76084f, 0.99915f),
        (0.11232f, 0.75717f, 0.99915f),
        (0.10121f, 0.75412f, 0.99915f),
        (0.09071f, 0.75119f, 0.99915f),
        (0.08204f, 0.74936f, 0.99915f),
        (0.07337f, 0.74594f, 0.99915f),
        (0.06580f, 0.74423f, 0.99915f),
        (0.06080f, 0.74338f, 0.99915f),
        (0.05592f, 0.74252f, 0.99915f),
        (0.05067f, 0.74106f, 0.99915f),
        (0.04334f, 0.73727f, 0.99915f),
        (0.03553f, 0.73446f, 0.99915f),
        (0.02771f, 0.73178f, 0.99915f),
        (0.02063f, 0.72958f, 0.99915f),
        (0.01624f, 0.72897f, 0.99915f),
        (0.01660f, 0.72628f, 0.99915f),
        (0.01697f, 0.72458f, 0.99915f),
        (0.01697f, 0.72250f, 0.99915f),
        (0.01673f, 0.72042f, 0.99915f),
        (0.01673f, 0.71957f, 0.99915f),
        (0.01721f, 0.71823f, 0.99915f),
        (0.01636f, 0.71493f, 0.99915f),
        (0.01709f, 0.71371f, 0.99915f),
        (0.01648f, 0.71298f, 0.99915f),
        (0.01660f, 0.71054f, 0.99915f),
        (0.01624f, 0.70980f, 0.99915f),
        (0.01685f, 0.70870f, 0.99915f),
        (0.01685f, 0.70577f, 0.99915f),
        (0.01673f, 0.70480f, 0.99915f),
        (0.01721f, 0.70260f, 0.99915f),
        (0.01673f, 0.70089f, 0.99915f),
        (0.01587f, 0.70126f, 0.99915f),
        (0.01697f, 0.70114f, 0.99915f),
        (0.01648f, 0.69894f, 0.99915f),
        (0.01697f, 0.69637f, 0.99915f),
        (0.01673f, 0.69564f, 0.99915f),
        (0.01624f, 0.69235f, 0.99915f),
        (0.01587f, 0.69161f, 0.99915f),
        (0.01660f, 0.68954f, 0.99915f),
        (0.01685f, 0.68880f, 0.99915f),
        (0.01599f, 0.68734f, 0.99915f),
        (0.01648f, 0.68624f, 0.99915f),
        (0.01624f, 0.68490f, 0.99915f),
        (0.01685f, 0.68417f, 0.99915f),
        (0.01697f, 0.68368f, 0.99915f),
        (0.01660f, 0.68294f, 0.99915f),
        (0.01673f, 0.68209f, 0.99915f),
        (0.01673f, 0.68148f, 0.99915f),
        (0.01660f, 0.68099f, 0.99915f),
        (0.01673f, 0.68014f, 0.99915f),
        (0.01599f, 0.67965f, 0.99915f),
        (0.01636f, 0.67867f, 0.99915f),
        (0.01673f, 0.67806f, 0.99915f),
        (0.01685f, 0.67721f, 0.99915f),
        (0.01660f, 0.67623f, 0.99915f),
        (0.01673f, 0.67489f, 0.99915f),
        (0.01660f, 0.67501f, 0.99915f),
        (0.01624f, 0.67354f, 0.99915f),
        (0.01648f, 0.67330f, 0.99915f),
        (0.01648f, 0.67306f, 0.99915f),
        (0.01648f, 0.67257f, 0.99915f),
        (0.01550f, 0.67196f, 0.99915f),
        (0.01648f, 0.67220f, 0.99915f),
        (0.01660f, 0.67122f, 0.99915f),
        (0.01624f, 0.67147f, 0.99915f),
        (0.01612f, 0.67086f, 0.99915f),
        (0.01575f, 0.67025f, 0.99915f),
        (0.01612f, 0.67025f, 0.99915f),
        (0.01636f, 0.66976f, 0.99915f),
        (0.01636f, 0.66927f, 0.99915f),
        (0.01612f, 0.66817f, 0.99915f),
        (0.01624f, 0.66805f, 0.99915f),
        (0.01648f, 0.66732f, 0.99915f),
        (0.01599f, 0.66659f, 0.99915f),
        (0.01660f, 0.66597f, 0.99915f),
        (0.01636f, 0.66500f, 0.99915f),
        (0.01612f, 0.66402f, 0.99915f),
        (0.01612f, 0.66243f, 0.99915f),
        (0.01587f, 0.66195f, 0.99915f),
        (0.01648f, 0.66121f, 0.99915f),
        (0.01636f, 0.66036f, 0.99915f),
        (0.01612f, 0.65950f, 0.99915f),
        (0.01636f, 0.65828f, 0.99915f),
        (0.01648f, 0.65767f, 0.99915f),
        (0.01624f, 0.65706f, 0.99915f),
        (0.01636f, 0.65609f, 0.99915f),
        (0.01624f, 0.65657f, 0.99915f),
        (0.01636f, 0.65743f, 0.99915f),
        (0.01624f, 0.65792f, 0.99915f),
        (0.01624f, 0.65718f, 0.99915f),
        (0.01624f, 0.65609f, 0.99915f),
        (0.01636f, 0.65621f, 0.99915f),
        (0.01636f, 0.65609f, 0.99915f),
        (0.01648f, 0.65535f, 0.99915f),
        (0.01624f, 0.65401f, 0.99915f),
        (0.01624f, 0.65303f, 0.99915f),
        (0.01587f, 0.65169f, 0.99915f),
        (0.01612f, 0.65047f, 0.99915f),
        (0.01612f, 0.64949f, 0.99915f),
        (0.01563f, 0.64888f, 0.99915f),
        (0.01587f, 0.64864f, 0.99915f),
        (0.01599f, 0.64766f, 0.99915f),
        (0.01636f, 0.64730f, 0.99915f),
        (0.01599f, 0.64717f, 0.99915f),
        (0.01587f, 0.64827f, 0.99915f),
        (0.01612f, 0.64827f, 0.99915f),
        (0.01624f, 0.64803f, 0.99915f),
        (0.01624f, 0.64925f, 0.99915f),
        (0.01648f, 0.64937f, 0.99915f),
        (0.01636f, 0.64925f, 0.99915f),
        (0.01538f, 0.64705f, 0.99915f),
        (0.01587f, 0.64669f, 0.99915f),
        (0.01636f, 0.64559f, 0.99915f),
        (0.01465f, 0.64559f, 0.99915f),
        (0.01550f, 0.64290f, 0.99915f),
        (0.01612f, 0.64766f, 0.99915f),
        (0.01343f, 0.64876f, 0.99915f),
        (0.01453f, 0.64424f, 0.99915f),
        (0.01636f, 0.64510f, 0.99915f),
        (0.01612f, 0.64339f, 0.99915f),
        (0.01624f, 0.64095f, 0.99915f),
        (0.01392f, 0.64095f, 0.99915f),
        (0.01612f, 0.64021f, 0.99915f),
        (0.01599f, 0.64021f, 0.99915f),
        (0.01612f, 0.63887f, 0.99915f),
        (0.01599f, 0.63851f, 0.99915f),
        (0.01636f, 0.63790f, 0.99915f),
        (0.01636f, 0.63728f, 0.99915f),
        (0.01612f, 0.64034f, 0.99915f),
        (0.01648f, 0.64510f, 0.99915f),
        (0.01587f, 0.64839f, 0.99915f),
        (0.01636f, 0.65120f, 0.99915f),
        (0.01441f, 0.65389f, 0.99915f),
        (0.01538f, 0.65499f, 0.99915f),
        (0.01575f, 0.65352f, 0.99915f),
        (0.01624f, 0.65487f, 0.99915f),
        (0.01612f, 0.65438f, 0.99915f),
        (0.01636f, 0.65340f, 0.99915f),
        (0.01575f, 0.65230f, 0.99915f),
        (0.01612f, 0.64937f, 0.99915f),
        (0.01612f, 0.64827f, 0.99915f),
        (0.01612f, 0.64595f, 0.99915f),
        (0.01612f, 0.64534f, 0.99915f),
        (0.01612f, 0.64534f, 0.99915f),
        (0.01587f, 0.64559f, 0.99915f),
        (0.01624f, 0.64632f, 0.99915f),
        (0.01624f, 0.64595f, 0.99915f),
        (0.01294f, 0.64070f, 0.99915f),
        (0.01587f, 0.63802f, 0.99915f),
        (0.01612f, 0.63692f, 0.99915f),
        (0.01624f, 0.63594f, 0.99915f),
        (0.01636f, 0.63509f, 0.99915f),
        (0.01294f, 0.63301f, 0.99915f),
        (0.01306f, 0.63301f, 0.99915f)
    };

    private void SignalSenderTask()
    {
        OscMessage message = new OscMessage();

        // Set the address 
        message.address = "/inputs/analogue";
        int waitMilliseconds = Convert.ToInt32(cycleWaitTimeSeconds * 1000f);

        int messageCounter = 0;
        int lastFlagSetting = 0;

        int baselineTotalMessageCount = baselineSequenceTupleList.Count;
        int breathTotalMessageCount = breathSequenceTupleList.Count;

        (float, float, float) listItemTuple;

        while (true)
        {
            lock (flagLock)
            {
                // initialize breath sequence if SEND_BREATH flag set and currently in baseline state
                if (sendBreathFlag == 1 && lastFlagSetting == 0)
                {
                    messageCounter = 0;
                    lastFlagSetting = 1;
                    Debug.Log("Sending Breath");
                }

                // reset to baseline sequence if done with breath frames or baseline sequence done. Reset message counter
                if ((messageCounter == breathTotalMessageCount && sendBreathFlag == 1) ||
                    (messageCounter == baselineTotalMessageCount && sendBreathFlag == 0))
                {
                    sendBreathFlag = 0;  // Only necessary for if in breathing case and done
                    lastFlagSetting = 0;
                    messageCounter = 0;
                }

                if (sendBreathFlag == 0)
                    listItemTuple = baselineSequenceTupleList[messageCounter];
                else
                    listItemTuple = breathSequenceTupleList[messageCounter];
                var vals = new List<float>();
                vals.Add(listItemTuple.Item1);
                vals.Add(listItemTuple.Item2);
                vals.Add(listItemTuple.Item3);

                message.values.AddRange(vals);
                // Send the message
                osc.Send(message);
                // incremenet counter

                messageCounter++;
            }

            // Debug.Log("Message Sent: " + messageCounter.ToString());
            Thread.Sleep(waitMilliseconds);
            message.values.Clear();
        }
    }

    // Start is called before the first frame update
    void Start()
    {
        if (turnSimulatorOn)
        {
            sendBreathFlag = 0;
            // Start the signal sender task
            Task.Run(() => SignalSenderTask());
        }
    }

    // Update is called once per frame
    void Update()
    {
       
        if (turnSimulatorOn && (Input.GetKeyDown("b")))
        {
            // Debug.Log("b key pressed");
            lock (flagLock)
            {
                sendBreathFlag = 1;
            }
        }
    }


   




}
